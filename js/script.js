// Generated by CoffeeScript 1.10.0

/*
-----------------------------------------------------------------------------------------------------------------
  VALUE
-----------------------------------------------------------------------------------------------------------------
 */

(function() {
  var COLORS_CMY, COLORS_CTM1, COLORS_CTM2, COLORS_CTM3, COLORS_RGB, DemoCanvas, FRICTION, MAX_SIZE, MAX_SPEED, MIN_SIZE, NUM_BALLS, SELECT_BLENDMODE, SELECT_COLORS, ballCollection, canPutBall, collideWall, ctx1, cvs1, demo, demoCanvas, drawBall, drawBase, getMaxIntRandom, getMaxRandom, getRadians, getRandomArrayValue, getRangeIntRandom, getRangeRandom, getVx, getVy, gui, isAlpha, isBallColors, isBaseColor, isBlendMode, isOverlap, loopTimer, onResize, randomOfAdd, randomOfMulti, randomOfNormal, randomOfSqrt, randomOfSquare, randomOfUniform, render, resizeTimer, stats, update;

  NUM_BALLS = 30;

  MAX_SIZE = 200;

  MIN_SIZE = 50;

  MAX_SPEED = MAX_SIZE + 5;

  FRICTION = 0.01;

  COLORS_CMY = ["#0ff", "#f0f", "#ff0"];

  COLORS_RGB = ["red", "#0f0", "blue"];

  COLORS_CTM1 = ["#6F2DBD", "#A663CC", "#B298DC", "#B8D0EB", "#B9FAF8"];

  COLORS_CTM2 = ["#5E2BFF", "#C04CFD", "#FC6DAB", "#F7F6C5", "#F3FAE1"];

  COLORS_CTM3 = ["#1BE7FF", "#6EEB83", "#E4FF1A", "#E8AA14", "#FF5714"];

  SELECT_COLORS = {
    CMY: "CMY",
    RGB: "RGB",
    Custom1: "CTM1",
    Custom2: "CTM2",
    Custom3: "CTM3"
  };

  SELECT_BLENDMODE = {
    multiply: "multiply",
    screen: "screen",
    overlay: "overlay",
    darken: "darken",
    lighten: "lighten",
    colorDodge: "color-dodge",
    colorBurn: "color-burn",
    hardLight: "hard-light",
    softLight: "soft-light",
    difference: "difference",
    exclusion: "exclusion",
    hue: "hue",
    saturation: "saturation",
    color: "color",
    luminosity: "luminosity",
    normal: "normal"
  };

  cvs1 = document.getElementById("cvs1");

  ctx1 = cvs1.getContext("2d");

  cvs1.width = document.documentElement.clientWidth;

  cvs1.height = document.documentElement.clientHeight;

  loopTimer = false;

  resizeTimer = false;

  ballCollection = new Array;

  isBlendMode = SELECT_BLENDMODE.multiply;

  isBallColors = COLORS_CMY;

  isAlpha = 1.0;

  isBaseColor = "#ffffff";


  /*
  -----------------------------------------------------------------------------------------------------------------
    UTILITY
  -----------------------------------------------------------------------------------------------------------------
   */

  randomOfUniform = function() {
    return Math.random();
  };

  randomOfAdd = function() {
    return (Math.random() + Math.random()) / 2;
  };

  randomOfMulti = function() {
    return Math.random() * Math.random();
  };

  randomOfSquare = function() {
    var _r;
    _r = Math.random();
    return _r * _r;
  };

  randomOfSqrt = function() {
    return Math.sqrt(Math.random());
  };

  randomOfNormal = function() {
    var _r, calc;
    calc = function() {
      var r, r1, r2;
      r1 = Math.random();
      r2 = Math.random();
      r = Math.sqrt(-2.0 * Math.log(r1)) * Math.sin(2.0 * Math.PI * r2);
      return (r + 3) / 6;
    };
    while (true) {
      _r = calc();
      if (0 <= _r && _r < 1) {
        break;
      }
    }
    return _r;
  };

  getMaxRandom = function(max, algorithm) {
    if (!algorithm) {
      algorithm = Math.random;
    }
    return algorithm() * max;
  };

  getMaxIntRandom = function(max, algorithm) {
    return Math.floor(getMaxRandom(max, algorithm));
  };

  getRangeRandom = function(min, max, algorithm) {
    if (!algorithm) {
      algorithm = Math.random;
    }
    return (algorithm() * (max - min)) + min;
  };

  getRangeIntRandom = function(min, max, algorithm) {
    return Math.floor(getRangeRandom(min, max, algorithm));
  };

  getRandomArrayValue = function(arr) {
    return arr[getMaxIntRandom(arr.length)];
  };

  getRadians = function(angle) {
    return angle * Math.PI / 180;
  };

  getVx = function(radians, speed) {
    return Math.cos(radians) * speed;
  };

  getVy = function(radians, speed) {
    return Math.sin(radians) * speed;
  };


  /*
  -----------------------------------------------------------------------------------------------------------------
    BALL FUNCTIONS
  -----------------------------------------------------------------------------------------------------------------
   */

  drawBase = function(cvs, ctx) {
    ctx.clearRect(0, 0, cvs.width, cvs.height);
  };

  drawBall = function(ctx, color, x, y, radius, startAngle, endAngle, anticlockwise) {
    ctx.fillStyle = color;
    ctx.strokeStyle = color;
    ctx.globalCompositeOperation = isBlendMode;
    ctx.globalAlpha = isAlpha;
    ctx.beginPath();
    ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise);
    ctx.fill();
  };

  isOverlap = function(b1, b2) {
    var distance, dx, dy, isHit;
    isHit = false;
    dx = b1.nextx - b2.nextx;
    dy = b1.nexty - b2.nexty;
    distance = dx * dx + dy * dy;
    if (distance <= Math.pow(b1.radius + b2.radius, 2)) {
      isHit = true;
    }
    return isHit;
  };

  canPutBall = function(theBall, balls) {
    var canPut, i, j, ref;
    canPut = true;
    for (i = j = 0, ref = balls.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      if (isOverlap(theBall, balls[i])) {
        canPut = false;
      }
    }
    return canPut;
  };

  collideWall = function(cvs, balls) {
    var ball, i, j, ref;
    ball = null;
    for (i = j = 0, ref = balls.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      ball = balls[i];
      if (ball.nextx + ball.radius > cvs.width) {
        ball.vx = ball.vx * -1;
        ball.nextx = cvs.width - ball.radius;
      } else if (ball.nextx - ball.radius < 0) {
        ball.vx = ball.vx * -1;
        ball.nextx = ball.radius;
      } else if (ball.nexty + ball.radius > cvs.height) {
        ball.vy = ball.vy * -1;
        ball.nexty = cvs.height - ball.radius;
      } else if (ball.nexty - ball.radius < 0) {
        ball.vy = ball.vy * -1;
        ball.nexty = ball.radius;
      }
    }
  };

  update = function(balls) {
    var ball, i, j, ref;
    for (i = j = 0, ref = balls.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      ball = balls[i];
      ball.vx = ball.vx - (ball.vx * FRICTION);
      ball.vy = ball.vy - (ball.vy * FRICTION);
      ball.nextx = ball.x + ball.vx;
      ball.nexty = ball.y + ball.vy;
    }
  };

  render = function(ctx, balls) {
    var ball, i, j, ref;
    ball = null;
    for (i = j = 0, ref = balls.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      ball = balls[i];
      ball.x = ball.nextx;
      ball.y = ball.nexty;
      drawBall(ctx, ball.color, ball.x, ball.y, ball.radius, 0, Math.PI * 2, true);
    }
  };


  /*
  -----------------------------------------------------------------------------------------------------------------
    DEMO
  -----------------------------------------------------------------------------------------------------------------
   */

  demo = function(_cvs, _ctx) {

    /*
     * ループ停止
     */
    var _angle, _ball, _canPut, _color, _radians, _radius, _speed, _vx, _vy, _x, _y, i, j, ref, ticker;
    cancelAnimationFrame(loopTimer);

    /*
     * 配列をリセット
     */
    ballCollection = [];

    /*
     * 全ボール生成ループ
     */
    for (i = j = 0, ref = NUM_BALLS; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {

      /*
       * ボール[i]が配置可能になるまで繰り返す
       */
      _canPut = false;
      while (!_canPut) {

        /*
         * 配置可能になるまでプロパティを再定義
         */
        _x = getMaxIntRandom(_cvs.width);
        _y = getMaxIntRandom(_cvs.height);
        _radius = getRangeIntRandom(MIN_SIZE, MAX_SIZE, randomOfSquare);
        _speed = MAX_SPEED - _radius;
        _angle = getMaxIntRandom(360);
        _radians = getRadians(_angle);
        _vx = getVx(_radians, _speed);
        _vy = getVy(_radians, _speed);
        _color = getRandomArrayValue(isBallColors);

        /*
         * ボールオブジェクトに代入し
         */
        _ball = {
          x: _x,
          y: _y,
          nextX: _x,
          nextY: _y,
          radius: _radius,
          speed: _speed,
          angle: _angle,
          vx: _vx,
          vy: _vy,
          color: _color
        };

        /*
         * 配置可能ならボールオブジェクトを配列へ格納
         */
        _canPut = canPutBall(_ball, ballCollection);
      }
      ballCollection.push(_ball);
    }

    /*
     * 毎フレーム処理
     */
    ticker = function() {
      loopTimer = requestAnimationFrame(ticker);
      drawBase(_cvs, _ctx);
      update(ballCollection);
      collideWall(_cvs, ballCollection);
      render(_ctx, ballCollection);
    };

    /*
     * ループ開始
     */
    loopTimer = requestAnimationFrame(ticker);
  };


  /*
  -----------------------------------------------------------------------------------------------------------------
    INIT/EVENT
  -----------------------------------------------------------------------------------------------------------------
   */

  this.restart = function() {
    demo(cvs1, ctx1);
  };

  this.restart();

  cvs1.addEventListener("click", this.restart, false);

  onResize = (function(_this) {
    return function(ev) {
      cvs1.width = document.documentElement.clientWidth;
      cvs1.height = document.documentElement.clientHeight;
      if (resizeTimer !== false) {
        clearTimeout(resizeTimer);
      }
      resizeTimer = setTimeout(_this.restart, 100);
    };
  })(this);

  window.addEventListener("resize", onResize, false);


  /*
  -----------------------------------------------------------------------------------------------------------------
    UI
  -----------------------------------------------------------------------------------------------------------------
   */

  DemoCanvas = function() {
    this.brendMode = SELECT_BLENDMODE.multiply;
    this.ballsColor = SELECT_COLORS.CMY;
    this.ballsAlpha = isAlpha;
    this.bgColor = isBaseColor;
    this.onClickCanvas = function() {
      return window.restart();
    };
  };

  demoCanvas = new DemoCanvas();

  gui = new dat.GUI();

  gui.domElement.style.marginRight = 0;

  gui.add(demoCanvas, "onClickCanvas");

  gui.add(demoCanvas, "brendMode", SELECT_BLENDMODE).onChange((function(_this) {
    return function(args) {
      isBlendMode = args;
      _this.restart();
    };
  })(this));

  gui.add(demoCanvas, "ballsColor", SELECT_COLORS).onChange((function(_this) {
    return function(args) {
      if (args === "CMY") {
        isBallColors = COLORS_CMY;
      } else if (args === "RGB") {
        isBallColors = COLORS_RGB;
      } else if (args === "CTM1") {
        isBallColors = COLORS_CTM1;
      } else if (args === "CTM2") {
        isBallColors = COLORS_CTM2;
      } else if (args === "CTM3") {
        isBallColors = COLORS_CTM3;
      }
      _this.restart();
    };
  })(this));

  gui.add(demoCanvas, "ballsAlpha", 0.1, 1.0).onChange((function(_this) {
    return function(args) {
      isAlpha = args;
    };
  })(this));

  gui.addColor(demoCanvas, "bgColor").onChange(function() {
    document.body.style.background = demoCanvas.bgColor;
  });

  stats = (function(stats) {
    var fps;
    fps = 60;
    stats = new Stats();
    stats.domElement.style.position = "fixed";
    stats.domElement.style.left = "0px";
    stats.domElement.style.top = "0px";
    stats.domElement.style.zIndex = "9999";
    document.body.appendChild(stats.domElement);
    setInterval(function() {
      return stats.update();
    }, 1000 / fps);
  })();

}).call(this);
